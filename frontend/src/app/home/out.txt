<mat-sidenav-container class="sidenav-container">
  <mat-sidenav #sidenav mode="over" position="end">
    <form [formGroup]="searchForm" class="search-form" (ngSubmit)="onSearchSubmit()">
      <h2>Advanced Search</h2>
    
      <!-- Age Range -->
      <div formGroupName="ageRange" class="slider-container">
        <h3>Age Range: {{searchForm.get('ageRange.min')?.value}} - {{searchForm.get('ageRange.max')?.value}}</h3>
        <mat-slider class="range-slider" [min]="minAge" [max]="maxAge" [step]="1">
          <input matSliderStartThumb formControlName="min">
          <input matSliderEndThumb formControlName="max">
        </mat-slider>
      </div>
    
      <!-- Fame Rating Range -->
      <div formGroupName="fameRange" class="slider-container">
        <h3>Fame Rating: {{searchForm.get('fameRange.min')?.value}} - {{searchForm.get('fameRange.max')?.value}}</h3>
        <mat-slider class="range-slider" [min]="minFame" [max]="maxFame" [step]="1">
          <input matSliderStartThumb formControlName="min">
          <input matSliderEndThumb formControlName="max">
        </mat-slider>
      </div>

      <!-- Location -->
      <mat-form-field appearance="outline">
        <mat-label>Location</mat-label>
        <input matInput formControlName="location" />
      </mat-form-field>

      <!-- Tags -->
      <mat-form-field appearance="outline">
        <mat-label>Tags</mat-label>
        <mat-select formControlName="tags" multiple>
          <mat-option *ngFor="let tag of tags" [value]="tag.id">
            {{ tag.name }}
          </mat-option>
        </mat-select>
      </mat-form-field>

      <!-- Interested In -->
      <mat-form-field appearance="outline">
        <mat-label>Interested In</mat-label>
        <mat-select formControlName="preferredGenders" multiple>
          <mat-option *ngFor="let gender of genders" [value]="gender.id">
            {{ gender.name }}
          </mat-option>
        </mat-select>
      </mat-form-field>

      <!-- Sort By -->
      <mat-form-field appearance="outline">
        <mat-label>Sort By</mat-label>
        <mat-select formControlName="sortBy">
          <mat-option value="age">Age</mat-option>
          <mat-option value="fame_rating">Fame Rating</mat-option>
          <mat-option value="location">Location</mat-option>
        </mat-select>
      </mat-form-field>

      <!-- Order -->
      <mat-form-field appearance="outline">
        <mat-label>Order</mat-label>
        <mat-select formControlName="order">
          <mat-option value="asc">Ascending</mat-option>
          <mat-option value="desc">Descending</mat-option>
        </mat-select>
      </mat-form-field>

      <button mat-raised-button color="primary" type="submit">Search</button>
      <button mat-button type="button" (click)="closeSearchPanel()">Close</button>
    </form>
  </mat-sidenav>

  <mat-sidenav-content>
    <div class="home-header">
      <button mat-icon-button (click)="openSearchPanel()">
        <mat-icon>filter_list</mat-icon>
      </button>
    </div>

    <div class="home-container">
      <ng-container *ngIf="currentProfile; else noProfiles">
        <mat-card
          #swipeCard
          class="profile-card"
          [class.animate-right]="animateRight"
          [class.animate-left]="animateLeft"
        >
          <img
            mat-card-image
            [src]="currentProfile.main_photo_url"
            [alt]="currentProfile.username"
          />
          <mat-card-content>
            <h2>{{ currentProfile.username }}, {{ currentProfile.age }}</h2>
            <p>{{ currentProfile.location?.city_name }}</p>
          </mat-card-content>
        </mat-card>

        <div class="action-buttons">
          <button mat-fab color="warn" (click)="onPassClick()">
            <mat-icon>close</mat-icon>
          </button>
          <button mat-fab color="primary" (click)="onLikeClick()">
            <mat-icon>favorite</mat-icon>
          </button>
        </div>
      </ng-container>

      <ng-template #noProfiles>
        <p>No profiles match your search criteria.</p>
      </ng-template>
    </div>
  </mat-sidenav-content>
</mat-sidenav-container>.sidenav-container {
  height: 100%;
  overflow-x: hidden;
  
  .mat-sidenav {
    width: 100%;
    max-width: 400px;
    padding: 16px;
    box-sizing: border-box;
    overflow-x: hidden;
    
    @media screen and (max-width: 400px) {
      max-width: 100%;
    }
  }
}

.search-form {
  display: flex;
  flex-direction: column;
  height: 100%;
  gap: 16px;
  padding: 0 16px 80px 16px;
  position: relative;
  box-sizing: border-box;
  overflow-x: hidden;

  .slider-container {
    width: 100%;
    padding: 8px 0;
    box-sizing: border-box;

    h3 {
      margin-bottom: 8px;
      font-size: 14px;
    }

    .mat-mdc-slider {
      width: 100%;
      box-sizing: border-box;
      margin: 0;
      padding: 0 8px; // Add padding to match form fields
    }
  }

  .mat-mdc-form-field {
    width: 100%;
    box-sizing: border-box;
  }

  .search-actions {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 16px;
    background: white;
    box-shadow: 0 -2px 4px rgba(0,0,0,0.1);
    display: flex;
    gap: 8px;
    box-sizing: border-box;
    
    button {
      flex: 1;
    }
  }
}import { ComponentFixture, TestBed } from '@angular/core/testing';

import { HomeComponent } from './home.component';

describe('HomeComponent', () => {
  let component: HomeComponent;
  let fixture: ComponentFixture<HomeComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [HomeComponent]
    })
    .compileComponents();

    fixture = TestBed.createComponent(HomeComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
import { Component, OnInit, ViewChild, Inject, PLATFORM_ID } from '@angular/core';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { MatSidenavModule, MatSidenav } from '@angular/material/sidenav';
import { MatCardModule } from '@angular/material/card';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Router } from '@angular/router';
import { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatSliderModule } from '@angular/material/slider'

interface UserProfile {
  id: number;
  username: string;
  main_photo_url: string | null;
  age: number | null;
  gender: number | null;
  location?: {
    latitude: number;
    longitude: number;
    city_name: string;
  };
  fame_rating: number | null;
}

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.scss'],
  standalone: true,
  imports: [
    CommonModule,
    MatCardModule,
    MatButtonModule,
    MatIconModule,
    ReactiveFormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatSelectModule,
    MatSidenavModule,
    MatSliderModule,
  ],
})
export class HomeComponent implements OnInit {
  @ViewChild('sidenav') sidenav!: MatSidenav;

  readonly minAge = 18;
  readonly maxAge = 120;
  readonly minFame = 0;
  readonly maxFame = 100;


  currentProfileIndex: number = 0;
  animateRight: boolean = false;
  animateLeft: boolean = false;
  profiles: UserProfile[] = [];
  searchForm!: FormGroup;
  genders: any[] = [];
  tags: any[] = [];

  constructor(
    @Inject(PLATFORM_ID) private platformId: Object,
    private http: HttpClient,
    private router: Router,
    private fb: FormBuilder
  ) {}

  get currentProfile(): UserProfile | undefined {
    return this.profiles[this.currentProfileIndex];
  }

  ngOnInit() {
    this.initializeSearchForm();
    this.loadGenders();
    this.loadTags();
    this.fetchProfiles();
  }

  initializeSearchForm() {
    this.searchForm = this.fb.group({
      ageRange: this.fb.group({
        min: [this.minAge],
        max: [this.maxAge]
      }),
      fameRange: this.fb.group({
        min: [this.minFame],
        max: [this.maxFame]
      }),
      location: [''],
      tags: [[]],
      preferredGenders: [[]],
      sortBy: [''],
      order: [''],
    });
  }

  loadGenders() {
    this.http.get<any[]>('http://localhost:8000/api/genders/').subscribe((data) => {
      this.genders = data;
    });
  }

  loadTags() {
    this.http.get<any[]>('http://localhost:8000/api/tags').subscribe((data) => {
      this.tags = data;
    });
  }

  openSearchPanel() {
    this.sidenav.open();
  }

  closeSearchPanel() {
    this.sidenav.close();
  }

  onSearchSubmit() {
    this.closeSearchPanel();
    this.fetchProfiles();
  }

  fetchProfiles() {
    let params = new HttpParams();
    const formValue = this.searchForm.value;

    if (formValue.ageMin) {
      params = params.set('ageMin', formValue.ageMin);
    }
    if (formValue.ageMax) {
      params = params.set('ageMax', formValue.ageMax);
    }
    if (formValue.fameMin) {
      params = params.set('fameMin', formValue.fameMin);
    }
    if (formValue.fameMax) {
      params = params.set('fameMax', formValue.fameMax);
    }
    if (formValue.location) {
      params = params.set('location', formValue.location);
    }
    if (formValue.tags && formValue.tags.length > 0) {
      params = params.set('tags', formValue.tags.join(','));
    }
    if (formValue.preferredGenders && formValue.preferredGenders.length > 0) {
      params = params.set('preferredGenders', formValue.preferredGenders.join(','));
    }
    if (formValue.sortBy) {
      params = params.set('sortBy', formValue.sortBy);
    }
    if (formValue.order) {
      params = params.set('order', formValue.order);
    }

    this.http
      .get<UserProfile[]>('http://localhost:8000/api/users/search', { params })
      .subscribe({
        next: (profiles) => {
          if (profiles.length === 0) {
            this.profiles = [];
          } else {
            this.profiles = profiles;
            this.currentProfileIndex = 0;
          }
        },
        error: (error) => {
          console.error('Error fetching profiles:', error);
        },
      });
  }

  onSwipe(liked: boolean) {
    if (liked) {
      console.log('Liked profile:', this.currentProfile?.username);
      this.animateRight = true;
    } else {
      console.log('Passed profile:', this.currentProfile?.username);
      this.animateLeft = true;
    }

    setTimeout(() => {
      this.nextProfile();
      this.resetAnimations();
    }, 500);
  }

  nextProfile() {
    if (this.currentProfileIndex < this.profiles.length - 1) {
      this.currentProfileIndex++;
    } else {
      this.profiles = []; // No more profiles
    }
  }

  resetAnimations() {
    this.animateRight = false;
    this.animateLeft = false;
  }

  onLikeClick() {
    this.onSwipe(true);
  }

  onPassClick() {
    this.onSwipe(false);
  }
}